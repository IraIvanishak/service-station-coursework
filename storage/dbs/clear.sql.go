// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: clear.sql

package dbs

import (
	"context"
	"database/sql"
)

const clearMeta = `-- name: ClearMeta :exec
CALL meta.clearmeat()
`

func (q *Queries) ClearMeta(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearMeta)
	return err
}

const clearStorage = `-- name: ClearStorage :exec
CALL storage.clearstorage()
`

func (q *Queries) ClearStorage(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, clearStorage)
	return err
}

const getLastDataLoadHistoryID = `-- name: GetLastDataLoadHistoryID :one
SELECT data_load_history_id
FROM meta.dataloadhistory
ORDER BY data_load_history_id DESC  
LIMIT 1
`

func (q *Queries) GetLastDataLoadHistoryID(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, getLastDataLoadHistoryID)
	var data_load_history_id int32
	err := row.Scan(&data_load_history_id)
	return data_load_history_id, err
}

const getStageData = `-- name: GetStageData :many
SELECT 'inventory' AS table_name, COUNT(*) AS row_count FROM stage.inventory
UNION ALL
SELECT 'service_inventory', COUNT(*) FROM stage.service_inventory
UNION ALL
SELECT 'service', COUNT(*) FROM stage.service
UNION ALL
SELECT 'supplier', COUNT(*) FROM stage.supplier
UNION ALL
SELECT 'supply', COUNT(*) FROM stage.supply
UNION ALL
SELECT 'supply_details', COUNT(*) FROM stage.supply_details
UNION ALL
SELECT 'service_repair', COUNT(*) FROM stage.service_repair
UNION ALL
SELECT 'detail', COUNT(*) FROM stage.detail
UNION ALL
SELECT 'repair', COUNT(*) FROM stage.repair
`

type GetStageDataRow struct {
	TableName string
	RowCount  int64
}

func (q *Queries) GetStageData(ctx context.Context) ([]GetStageDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getStageData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStageDataRow
	for rows.Next() {
		var i GetStageDataRow
		if err := rows.Scan(&i.TableName, &i.RowCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const olapToStageIncremental = `-- name: OlapToStageIncremental :exec
CALL stage.fill_staging_from_oltp_incremental()
`

func (q *Queries) OlapToStageIncremental(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, olapToStageIncremental)
	return err
}

const oltpToStage = `-- name: OltpToStage :exec
CALL public.transfer_data_to_stage()
`

func (q *Queries) OltpToStage(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, oltpToStage)
	return err
}

const stageToOlap = `-- name: StageToOlap :exec
CALL stage.fill_storage_from_stage()
`

func (q *Queries) StageToOlap(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, stageToOlap)
	return err
}

const stageToOlapIncremental = `-- name: StageToOlapIncremental :exec
CALL stage.fill_olap_from_staging_incremental()
`

func (q *Queries) StageToOlapIncremental(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, stageToOlapIncremental)
	return err
}

const updateDataLoadHistory = `-- name: UpdateDataLoadHistory :exec
UPDATE meta.dataloadhistory
SET 
    load_rows = $1,
    affected_table_count = $2
WHERE
    data_load_history_id = $3
`

type UpdateDataLoadHistoryParams struct {
	LoadRows           sql.NullInt32
	AffectedTableCount sql.NullInt32
	DataLoadHistoryID  int32
}

func (q *Queries) UpdateDataLoadHistory(ctx context.Context, arg UpdateDataLoadHistoryParams) error {
	_, err := q.db.ExecContext(ctx, updateDataLoadHistory, arg.LoadRows, arg.AffectedTableCount, arg.DataLoadHistoryID)
	return err
}
