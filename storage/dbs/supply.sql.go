// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: supply.sql

package dbs

import (
	"context"
	"database/sql"
	"time"
)

const deleteSupply = `-- name: DeleteSupply :exec
DELETE FROM supply
WHERE supply_id = $1
`

func (q *Queries) DeleteSupply(ctx context.Context, supplyID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSupply, supplyID)
	return err
}

const deleteSupplyDetailsBySupplyId = `-- name: DeleteSupplyDetailsBySupplyId :exec
UPDATE supply_details
SET supply_id = NULL
WHERE supply_id = $1
`

func (q *Queries) DeleteSupplyDetailsBySupplyId(ctx context.Context, supplyID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteSupplyDetailsBySupplyId, supplyID)
	return err
}

const getInventoryIDbyDetailsID = `-- name: GetInventoryIDbyDetailsID :one
SELECT 
    inventory_id
FROM
    inventory
WHERE
    detail_id = $1
ORDER BY inventory_id DESC
LIMIT 1
`

func (q *Queries) GetInventoryIDbyDetailsID(ctx context.Context, detailID sql.NullInt32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getInventoryIDbyDetailsID, detailID)
	var inventory_id int32
	err := row.Scan(&inventory_id)
	return inventory_id, err
}

const getSupplyByID = `-- name: GetSupplyByID :one
SELECT 
    s.supply_id,
    s.supply_number,
    s.supply_date
FROM
    supply s
WHERE
    s.supply_id = $1
`

type GetSupplyByIDRow struct {
	SupplyID     int32
	SupplyNumber string
	SupplyDate   time.Time
}

func (q *Queries) GetSupplyByID(ctx context.Context, supplyID int32) (GetSupplyByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getSupplyByID, supplyID)
	var i GetSupplyByIDRow
	err := row.Scan(&i.SupplyID, &i.SupplyNumber, &i.SupplyDate)
	return i, err
}

const getSupplyDetailPrice = `-- name: GetSupplyDetailPrice :one
SELECT 
    price
FROM
    detail
WHERE
    detail_id = $1
`

func (q *Queries) GetSupplyDetailPrice(ctx context.Context, detailID int32) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getSupplyDetailPrice, detailID)
	var price sql.NullString
	err := row.Scan(&price)
	return price, err
}

const getSupplyDetailsByID = `-- name: GetSupplyDetailsByID :many
SELECT 
    sd.supply_details_id,
    sd.detail_id,
    sd.quantity,
    sd.price_per_unit
FROM
    supply_details sd
WHERE
    sd.supply_id = $1
`

type GetSupplyDetailsByIDRow struct {
	SupplyDetailsID int32
	DetailID        sql.NullInt32
	Quantity        sql.NullInt32
	PricePerUnit    sql.NullString
}

func (q *Queries) GetSupplyDetailsByID(ctx context.Context, supplyID sql.NullInt32) ([]GetSupplyDetailsByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getSupplyDetailsByID, supplyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSupplyDetailsByIDRow
	for rows.Next() {
		var i GetSupplyDetailsByIDRow
		if err := rows.Scan(
			&i.SupplyDetailsID,
			&i.DetailID,
			&i.Quantity,
			&i.PricePerUnit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSupply = `-- name: ListSupply :many
SELECT 
    s.supply_id,
    s.supply_number,
    s.supply_date,
    sd.detail_id,
    sd.quantity,
    sd.price_per_unit,
    su.name AS supplier_name,
    e.first_name AS employee_first_name,
    e.last_name AS employee_last_name,
    ss.title AS supply_status,
    si.invoice_number as invoice_number,
    ss2.address as service_station,
    d.article as article,
    d.description as description
    
FROM 
    supply s
left JOIN 
    supply_details sd ON s.supply_id = sd.supply_id
left JOIN 
    supplier su ON s.supplier_id = su.supplier_id
left JOIN 
    employee e ON s.employee_id = e.employee_id
left JOIN 
    supply_status ss ON s.status_id = ss.status_id
left join 
	supply_invoice si on si.supply_details_id = sd.supply_details_id
left join 
	inventory i on si.inventory_id = i.inventory_id 
left join 
	service_station ss2 on ss2.station_id = i.service_station_id 
left join 
	detail d on d.detail_id = sd.detail_id
`

type ListSupplyRow struct {
	SupplyID          int32
	SupplyNumber      string
	SupplyDate        time.Time
	DetailID          sql.NullInt32
	Quantity          sql.NullInt32
	PricePerUnit      sql.NullString
	SupplierName      sql.NullString
	EmployeeFirstName sql.NullString
	EmployeeLastName  sql.NullString
	SupplyStatus      sql.NullString
	InvoiceNumber     sql.NullString
	ServiceStation    sql.NullString
	Article           sql.NullInt32
	Description       sql.NullString
}

func (q *Queries) ListSupply(ctx context.Context) ([]ListSupplyRow, error) {
	rows, err := q.db.QueryContext(ctx, listSupply)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSupplyRow
	for rows.Next() {
		var i ListSupplyRow
		if err := rows.Scan(
			&i.SupplyID,
			&i.SupplyNumber,
			&i.SupplyDate,
			&i.DetailID,
			&i.Quantity,
			&i.PricePerUnit,
			&i.SupplierName,
			&i.EmployeeFirstName,
			&i.EmployeeLastName,
			&i.SupplyStatus,
			&i.InvoiceNumber,
			&i.ServiceStation,
			&i.Article,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newSupply = `-- name: NewSupply :one
INSERT INTO supply (
    supply_number,
    supply_date,
    supplier_id,
    employee_id,
    total_sum,
    status_id
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING supply_id
`

type NewSupplyParams struct {
	SupplyNumber string
	SupplyDate   time.Time
	SupplierID   sql.NullInt32
	EmployeeID   sql.NullInt32
	TotalSum     sql.NullString
	StatusID     sql.NullInt32
}

func (q *Queries) NewSupply(ctx context.Context, arg NewSupplyParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, newSupply,
		arg.SupplyNumber,
		arg.SupplyDate,
		arg.SupplierID,
		arg.EmployeeID,
		arg.TotalSum,
		arg.StatusID,
	)
	var supply_id int32
	err := row.Scan(&supply_id)
	return supply_id, err
}

const newSupplyDetail = `-- name: NewSupplyDetail :one
INSERT INTO supply_details
(supply_id, detail_id, quantity, price_per_unit)
Values
($1, $2, $3, $4)
Returning supply_details_id
`

type NewSupplyDetailParams struct {
	SupplyID     sql.NullInt32
	DetailID     sql.NullInt32
	Quantity     sql.NullInt32
	PricePerUnit sql.NullString
}

func (q *Queries) NewSupplyDetail(ctx context.Context, arg NewSupplyDetailParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, newSupplyDetail,
		arg.SupplyID,
		arg.DetailID,
		arg.Quantity,
		arg.PricePerUnit,
	)
	var supply_details_id int32
	err := row.Scan(&supply_details_id)
	return supply_details_id, err
}

const newSupplyInvoice = `-- name: NewSupplyInvoice :one
INSERT INTO supply_invoice
(supply_details_id, invoice_number, inventory_id)
Values
($1, $2, $3)
Returning supply_invoice_id
`

type NewSupplyInvoiceParams struct {
	SupplyDetailsID sql.NullInt32
	InvoiceNumber   sql.NullString
	InventoryID     int32
}

func (q *Queries) NewSupplyInvoice(ctx context.Context, arg NewSupplyInvoiceParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, newSupplyInvoice, arg.SupplyDetailsID, arg.InvoiceNumber, arg.InventoryID)
	var supply_invoice_id int32
	err := row.Scan(&supply_invoice_id)
	return supply_invoice_id, err
}

const setSupplyStatus = `-- name: SetSupplyStatus :one
UPDATE supply
SET status_id = $1
WHERE supply_id = $2
RETURNING supply_id
`

type SetSupplyStatusParams struct {
	StatusID sql.NullInt32
	SupplyID int32
}

func (q *Queries) SetSupplyStatus(ctx context.Context, arg SetSupplyStatusParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, setSupplyStatus, arg.StatusID, arg.SupplyID)
	var supply_id int32
	err := row.Scan(&supply_id)
	return supply_id, err
}

const storeInventory = `-- name: StoreInventory :one
UPDATE inventory
SET quantity = quantity + $1
WHERE detail_id = $2
RETURNING inventory_id
`

type StoreInventoryParams struct {
	Quantity sql.NullInt32
	DetailID sql.NullInt32
}

func (q *Queries) StoreInventory(ctx context.Context, arg StoreInventoryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, storeInventory, arg.Quantity, arg.DetailID)
	var inventory_id int32
	err := row.Scan(&inventory_id)
	return inventory_id, err
}
