// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: olap1.sql

package dbs

import (
	"context"
	"database/sql"
)

const getCubeServiceInventory = `-- name: GetCubeServiceInventory :many
SELECT 
    sif.service_inventory_fact_id AS service_inventory_fact_id,
    sif.parts_cost AS parts_cost,
    sif.total_cost AS total_cost,
    sif.parts_cost_percentage AS parts_cost_percentage,
    sif.estimated_service_duration AS estimated_service_duration,
    sif.actual_service_duration AS actual_service_duration,
    sif.service_duration_deviation AS service_duration_deviation,
    sif.amount AS inventory_amount,
    srd.service_repair_dim_id AS service_repair_dim_id,
    srd.service_id AS service_id,
    srd.repair_id AS repair_id,
    srd.quantity AS service_quantity,
    srd.service_total_price AS service_total_price,
    sd.name AS service_name,    
    sd.description AS service_description,
    sd.price AS service_price,
    sd.estimated_duration AS service_estimated_duration,
    r.notes AS repair_notes,
    r.repair_number AS repair_number,
    id.inventory_dim_id AS inventory_dim_id,
    id.bk_detail_id AS inventory_bk_detail_id,
    id.description AS inventory_description,
    id.article AS inventory_article,
    id.price AS inventory_price,
    id.dimensions AS inventory_dimensions,
    id.weight AS inventory_weight
FROM 
    storage.service_inventory_fact sif
    JOIN storage.service_repair_dim srd ON sif.service_repair_dim_id = srd.service_repair_dim_id
    JOIN storage.service_dim sd ON srd.service_id = sd.service_dim_id 
    JOIN storage.repair_dim r ON srd.repair_id = r.repair_dim_id
    JOIN storage.inventory_dim id ON sif.inventory_dim_id = id.inventory_dim_id
`

type GetCubeServiceInventoryRow struct {
	ServiceInventoryFactID   int32
	PartsCost                sql.NullString
	TotalCost                sql.NullString
	PartsCostPercentage      sql.NullString
	EstimatedServiceDuration sql.NullString
	ActualServiceDuration    sql.NullString
	ServiceDurationDeviation sql.NullString
	InventoryAmount          sql.NullString
	ServiceRepairDimID       int32
	ServiceID                int32
	RepairID                 int32
	ServiceQuantity          sql.NullInt32
	ServiceTotalPrice        sql.NullString
	ServiceName              sql.NullString
	ServiceDescription       sql.NullString
	ServicePrice             sql.NullString
	ServiceEstimatedDuration sql.NullString
	RepairNotes              sql.NullString
	RepairNumber             sql.NullString
	InventoryDimID           int32
	InventoryBkDetailID      int32
	InventoryDescription     sql.NullString
	InventoryArticle         sql.NullString
	InventoryPrice           sql.NullString
	InventoryDimensions      sql.NullString
	InventoryWeight          sql.NullString
}

func (q *Queries) GetCubeServiceInventory(ctx context.Context) ([]GetCubeServiceInventoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getCubeServiceInventory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCubeServiceInventoryRow
	for rows.Next() {
		var i GetCubeServiceInventoryRow
		if err := rows.Scan(
			&i.ServiceInventoryFactID,
			&i.PartsCost,
			&i.TotalCost,
			&i.PartsCostPercentage,
			&i.EstimatedServiceDuration,
			&i.ActualServiceDuration,
			&i.ServiceDurationDeviation,
			&i.InventoryAmount,
			&i.ServiceRepairDimID,
			&i.ServiceID,
			&i.RepairID,
			&i.ServiceQuantity,
			&i.ServiceTotalPrice,
			&i.ServiceName,
			&i.ServiceDescription,
			&i.ServicePrice,
			&i.ServiceEstimatedDuration,
			&i.RepairNotes,
			&i.RepairNumber,
			&i.InventoryDimID,
			&i.InventoryBkDetailID,
			&i.InventoryDescription,
			&i.InventoryArticle,
			&i.InventoryPrice,
			&i.InventoryDimensions,
			&i.InventoryWeight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
